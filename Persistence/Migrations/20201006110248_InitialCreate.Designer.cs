// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201006110248_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Affilie", b =>
                {
                    b.Property<string>("Cin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cin")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Adresse")
                        .HasColumnName("adresse")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("CodePostale")
                        .HasColumnName("code_postale")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnName("date_naissance")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Matricule")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("NPension");

                    b.Property<string>("Nom")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NumAdherent")
                        .HasColumnName("num_adherent")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Prenom")
                        .HasColumnName("prenom")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Rang")
                        .HasColumnName("rang");

                    b.Property<string>("Rib")
                        .HasColumnName("rib")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("Sexe")
                        .HasColumnName("sexe")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("SituationVital")
                        .HasColumnName("situation_vital");

                    b.Property<string>("Telephone")
                        .HasColumnName("telephone1")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Telephone2")
                        .HasColumnName("telephone2")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("TypeAffilie")
                        .HasColumnName("type_affilie")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Ville")
                        .HasColumnName("ville")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Cin")
                        .HasName("pk_affile");

                    b.HasIndex("Cin")
                        .IsUnique()
                        .HasName("UQ__affilies__D837D024EF0DEB99");

                    b.ToTable("affilies");
                });

            modelBuilder.Entity("Domain.AnnulerQp", b =>
                {
                    b.Property<int>("idAnnulation")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAnnul")
                        .HasColumnName("date_annul")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<int?>("IdPaiAnnul")
                        .HasColumnName("id_pai_annul");

                    b.Property<string>("IdUserAnnul")
                        .HasColumnName("id_user_annul");

                    b.HasKey("idAnnulation")
                        .HasName("pk_annulationQp");

                    b.HasIndex("IdPaiAnnul");

                    b.HasIndex("IdUserAnnul");

                    b.ToTable("Annuler_qp");
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Bio");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.AvanceCheque", b =>
                {
                    b.Property<int>("IdAvanceCheque")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_avance_cheque")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CinAv")
                        .HasColumnName("cin_av")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateAvance")
                        .HasColumnName("date_avance_")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<DateTime>("DateSaisie")
                        .HasColumnName("date_saisie")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<double>("MontantAv")
                        .HasColumnName("montant_av")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Obser")
                        .HasColumnName("obser")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("UserAvance")
                        .HasColumnName("user_avance");

                    b.HasKey("IdAvanceCheque")
                        .HasName("pk_avance_cheque");

                    b.HasIndex("CinAv");

                    b.HasIndex("UserAvance");

                    b.ToTable("avance_cheque");
                });

            modelBuilder.Entity("Domain.Carte", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CinPorteur")
                        .HasColumnName("CinPorteur")
                        .IsUnicode(false);

                    b.Property<DateTime>("DateArrive")
                        .HasColumnName("DateArrive")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<DateTime>("DateEnvoie")
                        .HasColumnName("DateEnvoie")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<bool>("Disponible")
                        .HasColumnName("Disponible")
                        .IsUnicode(false);

                    b.Property<string>("NomPoretur")
                        .HasColumnName("NomPoretur")
                        .IsUnicode(false);

                    b.Property<string>("UserEnvoie");

                    b.Property<string>("UserReception");

                    b.Property<string>("cinAff")
                        .HasColumnName("cinAff")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("id")
                        .HasName("pk_Carte");

                    b.HasIndex("UserEnvoie");

                    b.HasIndex("UserReception");

                    b.HasIndex("cinAff");

                    b.ToTable("Cartes");
                });

            modelBuilder.Entity("Domain.Conjoint", b =>
                {
                    b.Property<string>("Cin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Cin")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnName("DateNaissance")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<string>("Nom")
                        .HasColumnName("Nom")
                        .IsUnicode(false);

                    b.Property<string>("Observation")
                        .HasColumnName("Observation")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Prenom")
                        .HasColumnName("Prenom")
                        .IsUnicode(false);

                    b.Property<int>("Rang")
                        .HasColumnName("Rang");

                    b.Property<string>("Sexe")
                        .HasColumnName("Sexe")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("cinAff")
                        .HasColumnName("cinAff")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Cin")
                        .HasName("pk_Conjoint");

                    b.HasIndex("cinAff");

                    b.ToTable("Conjointes");
                });

            modelBuilder.Entity("Domain.CorrigeRejet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCorrige")
                        .HasColumnName("DateCorrige")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<string>("UserCorrigeRejet")
                        .HasColumnName("UserCorrigeRejet");

                    b.Property<int>("idRej")
                        .HasColumnName("idRej");

                    b.Property<int>("numLot")
                        .HasColumnName("numLot")
                        .IsUnicode(false);

                    b.HasKey("id")
                        .HasName("pk_CorrigeMisAjour");

                    b.HasIndex("UserCorrigeRejet");

                    b.HasIndex("idRej");

                    b.ToTable("CorrigeRejets");
                });

            modelBuilder.Entity("Domain.CumuleQp", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cin")
                        .HasColumnName("cin")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateAffectation")
                        .HasColumnName("date_affectation")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<string>("IdUser");

                    b.Property<double>("Montant")
                        .HasColumnName("montant")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observation")
                        .HasColumnName("observation")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("id")
                        .HasName("pk_cumuleQp");

                    b.HasIndex("Cin");

                    b.HasIndex("IdUser");

                    b.ToTable("cumule_qp");
                });

            modelBuilder.Entity("Domain.DgsnReponse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CinConj")
                        .HasColumnName("CinConj")
                        .IsUnicode(false);

                    b.Property<DateTime>("DateEnvoie")
                        .HasColumnName("DateEnvoie")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<DateTime>("DateReponse")
                        .HasColumnName("DateReponse")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<int>("IdLotDgsn")
                        .HasColumnName("IdLotDgsn")
                        .IsUnicode(false);

                    b.Property<string>("Reponse")
                        .HasColumnName("Reponse")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("id")
                        .HasName("pk_DgsnReponse");

                    b.HasIndex("CinConj");

                    b.HasIndex("IdLotDgsn");

                    b.ToTable("DgsnReponses");
                });

            modelBuilder.Entity("Domain.Echeance", b =>
                {
                    b.Property<int>("CodeEchance")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("code_echance")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateDebut")
                        .HasColumnName("date_debut")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<DateTime>("DateFin")
                        .HasColumnName("date_fin")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<string>("User");

                    b.HasKey("CodeEchance")
                        .HasName("pk_code_echance_qp");

                    b.HasIndex("User");

                    b.ToTable("echeance");
                });

            modelBuilder.Entity("Domain.Enfant", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cin")
                        .HasColumnName("Cin")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnName("DateNaissance")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<string>("Nom")
                        .HasColumnName("Nom")
                        .IsUnicode(false);

                    b.Property<string>("Observation")
                        .HasColumnName("Observation")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Prenom")
                        .HasColumnName("Prenom")
                        .IsUnicode(false);

                    b.Property<int>("Rang")
                        .HasColumnName("Rang");

                    b.Property<string>("Sexe")
                        .HasColumnName("Sexe")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("cinAff")
                        .HasColumnName("cinAff")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("id")
                        .HasName("pk_Enfant");

                    b.HasIndex("cinAff");

                    b.ToTable("Enfants");
                });

            modelBuilder.Entity("Domain.LotDgsn", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateDebut")
                        .HasColumnName("DateDebut")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<DateTime>("Datefin")
                        .HasColumnName("Datefin")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<string>("UserDebutDgsn")
                        .HasColumnName("UserDebutDgsn");

                    b.Property<string>("UserEnvoieDgsn")
                        .HasColumnName("UserEnvoieDgsn");

                    b.HasKey("id")
                        .HasName("pk_LotDgsn");

                    b.HasIndex("UserDebutDgsn");

                    b.HasIndex("UserEnvoieDgsn");

                    b.ToTable("LotDgsns");
                });

            modelBuilder.Entity("Domain.LotMisAjour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateDebut")
                        .HasColumnName("DateDebut")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<DateTime>("DateEnvoie")
                        .HasColumnName("DateEnvoie")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<string>("UserDebut")
                        .HasColumnName("UserDebut");

                    b.HasKey("Id")
                        .HasName("pk_LotMisAjour");

                    b.HasIndex("UserDebut");

                    b.ToTable("LotMisAjours");
                });

            modelBuilder.Entity("Domain.MisAjour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AvcSCarte")
                        .HasColumnName("AvcSCarte")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("CinAffilie")
                        .HasColumnName("CinAffilie")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateMaj")
                        .HasColumnName("DateMaj")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<bool>("EnCours")
                        .HasColumnName("EnCours")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Info")
                        .HasColumnName("Info")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("NumCarte")
                        .HasColumnName("NumCarte")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("NumLotMaj")
                        .HasColumnName("NumLotMaj")
                        .IsUnicode(false);

                    b.Property<int>("TypeMaj")
                        .HasColumnName("TypeMaj")
                        .IsUnicode(false);

                    b.Property<string>("UserMaj")
                        .HasColumnName("UserMaj");

                    b.Property<string>("infoIdentifiant")
                        .HasColumnName("infoIdentifiant")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("pk_misAjour");

                    b.HasIndex("CinAffilie");

                    b.HasIndex("NumLotMaj");

                    b.HasIndex("TypeMaj");

                    b.HasIndex("UserMaj");

                    b.ToTable("MisAJours");
                });

            modelBuilder.Entity("Domain.Photo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppUserId");

                    b.Property<bool>("IsMain");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Domain.Qp", b =>
                {
                    b.Property<string>("NDossier")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("N_dossier")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CodeEchance")
                        .HasColumnName("code_echance_");

                    b.Property<DateTime>("DatePaiementReel")
                        .HasColumnName("Date_Paiement_Reel")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<DateTime>("DatePaiementTech")
                        .HasColumnName("Date_Paiement_Tech")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<double?>("FraisEngage")
                        .HasColumnName("Frais_engage");

                    b.Property<string>("Iduser");

                    b.Property<string>("NCin")
                        .HasColumnName("N_CIN")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Observation")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("Rang")
                        .HasColumnName("rang");

                    b.Property<double?>("RembAmo")
                        .HasColumnName("Remb_AMO");

                    b.Property<double?>("RembMpsc")
                        .HasColumnName("Remb_MPSC");

                    b.Property<double?>("TotalRemb")
                        .HasColumnName("Total_Remb");

                    b.HasKey("NDossier")
                        .HasName("pk_n_dossier");

                    b.HasIndex("CodeEchance");

                    b.HasIndex("Iduser");

                    b.HasIndex("NCin");

                    b.ToTable("Qps");
                });

            modelBuilder.Entity("Domain.QpMois", b =>
                {
                    b.Property<int>("IdPai")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pai")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CinPaiement")
                        .HasColumnName("cin_paiement")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("CinQp")
                        .HasColumnName("cin_qp")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<double?>("Code303")
                        .HasColumnName("code_303")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("Code304")
                        .HasColumnName("code_304")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CodeEchanceQpMois")
                        .HasColumnName("code_echance_qp_mois");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date_")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<DateTime>("DateSaisie")
                        .HasColumnName("date_saisie")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<string>("IdUser")
                        .HasColumnName("id_user");

                    b.Property<string>("Observation")
                        .HasColumnName("observation")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<double?>("Qp")
                        .HasColumnName("QP")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Rcar")
                        .HasColumnName("rcar")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TypePai")
                        .HasColumnName("type_pai")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdPai")
                        .HasName("pk_pai_");

                    b.HasIndex("CinQp");

                    b.HasIndex("CodeEchanceQpMois");

                    b.HasIndex("IdUser");

                    b.ToTable("qp_mois");
                });

            modelBuilder.Entity("Domain.RejetMaj", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Boite")
                        .HasColumnName("Boite")
                        .IsUnicode(false);

                    b.Property<DateTime>("DateRejet")
                        .HasColumnName("DateRejet")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<int>("IdMaj")
                        .HasColumnName("IdMaj")
                        .IsUnicode(false);

                    b.Property<string>("Motif")
                        .HasColumnName("Motif")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Observation")
                        .HasColumnName("Observation")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("UserRej")
                        .HasColumnName("UserRej");

                    b.HasKey("id")
                        .HasName("pk_RejmisAjour");

                    b.HasIndex("IdMaj");

                    b.HasIndex("UserRej");

                    b.ToTable("RejetMajs");
                });

            modelBuilder.Entity("Domain.TypeMisAjour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Intitule")
                        .HasColumnName("Intitule")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("pk_TypeMisAjour");

                    b.ToTable("TypeMisAjour");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.AnnulerQp", b =>
                {
                    b.HasOne("Domain.QpMois", "IdPaiAnnulNavigation")
                        .WithMany()
                        .HasForeignKey("IdPaiAnnul")
                        .HasConstraintName("fk_id_pai_annul_qp")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.AppUser", "IdUserAnnulNavigation")
                        .WithMany()
                        .HasForeignKey("IdUserAnnul")
                        .HasConstraintName("fk_user_annul_qp")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.AvanceCheque", b =>
                {
                    b.HasOne("Domain.Affilie", "CinAvNavigation")
                        .WithMany("AvanceCheques")
                        .HasForeignKey("CinAv")
                        .HasConstraintName("fk_avance_cheque_cin")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.AppUser", "UserAvanceNavigation")
                        .WithMany("AvanceCheques")
                        .HasForeignKey("UserAvance")
                        .HasConstraintName("fk_user_avance");
                });

            modelBuilder.Entity("Domain.Carte", b =>
                {
                    b.HasOne("Domain.AppUser", "UserEnvoieNavigation")
                        .WithMany("CartesEnvoies")
                        .HasForeignKey("UserEnvoie")
                        .HasConstraintName("fk_UserEnvoieCarte");

                    b.HasOne("Domain.AppUser", "UseReceptionNavigation")
                        .WithMany("CartesReceptions")
                        .HasForeignKey("UserReception")
                        .HasConstraintName("fk_UseReceptionCarte");

                    b.HasOne("Domain.Affilie", "cinAffNavigation")
                        .WithMany("Cartes")
                        .HasForeignKey("cinAff")
                        .HasConstraintName("fk_CinCarte");
                });

            modelBuilder.Entity("Domain.Conjoint", b =>
                {
                    b.HasOne("Domain.Affilie", "cinAffNavigation")
                        .WithMany("Conjoints")
                        .HasForeignKey("cinAff")
                        .HasConstraintName("fk_CinAffConjoint");
                });

            modelBuilder.Entity("Domain.CorrigeRejet", b =>
                {
                    b.HasOne("Domain.AppUser", "IdUserCorrigeRejNavigation")
                        .WithMany("CorrigeRejets")
                        .HasForeignKey("UserCorrigeRejet")
                        .HasConstraintName("fk_userCorrigeRejMisAjour");

                    b.HasOne("Domain.RejetMaj", "idRejNavigation")
                        .WithMany("CorrigeRejets")
                        .HasForeignKey("idRej")
                        .HasConstraintName("fk_NumLotCorrigeMaj")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.CumuleQp", b =>
                {
                    b.HasOne("Domain.Affilie", "CinNavigation")
                        .WithMany("CumuleQps")
                        .HasForeignKey("Cin")
                        .HasConstraintName("fk_affilieCumuleQp");

                    b.HasOne("Domain.AppUser", "IdUserNavigation")
                        .WithMany("CumuleQps")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("fk_userCumuleQp");
                });

            modelBuilder.Entity("Domain.DgsnReponse", b =>
                {
                    b.HasOne("Domain.Conjoint", "CinConjNavigation")
                        .WithMany("DgsnReponses")
                        .HasForeignKey("CinConj")
                        .HasConstraintName("fk_ConjointDgsn");

                    b.HasOne("Domain.LotDgsn", "IdLotDgsnNavigation")
                        .WithMany("DgsnReponses")
                        .HasForeignKey("IdLotDgsn")
                        .HasConstraintName("fk_LotDgsn")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Echeance", b =>
                {
                    b.HasOne("Domain.AppUser", "IdUserDebutNavigation")
                        .WithMany("Echeances")
                        .HasForeignKey("User")
                        .HasConstraintName("fk_userDebutEcheance");
                });

            modelBuilder.Entity("Domain.Enfant", b =>
                {
                    b.HasOne("Domain.Affilie", "cinAffNavigation")
                        .WithMany("Enfants")
                        .HasForeignKey("cinAff")
                        .HasConstraintName("fk_CinAffEnfant");
                });

            modelBuilder.Entity("Domain.LotDgsn", b =>
                {
                    b.HasOne("Domain.AppUser", "UserDebutDgsntNavigation")
                        .WithMany("UserDebuts")
                        .HasForeignKey("UserDebutDgsn")
                        .HasConstraintName("fk_lotDgsnUserDebutDgsn");

                    b.HasOne("Domain.AppUser", "UserEnvoieDgsnNavigation")
                        .WithMany("UserEvoies")
                        .HasForeignKey("UserEnvoieDgsn")
                        .HasConstraintName("fk_LotDgsnUserEnvoieDgsn");
                });

            modelBuilder.Entity("Domain.LotMisAjour", b =>
                {
                    b.HasOne("Domain.AppUser", "IdUserDebutNavigation")
                        .WithMany("LotMisAjours")
                        .HasForeignKey("UserDebut")
                        .HasConstraintName("fk_UserDebutLotMAJ")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.MisAjour", b =>
                {
                    b.HasOne("Domain.Affilie", "CinAvNavigation")
                        .WithMany("MisAjours")
                        .HasForeignKey("CinAffilie")
                        .HasConstraintName("fk_affilieMisAjour");

                    b.HasOne("Domain.LotMisAjour", "LotMisAjourNavigation")
                        .WithMany("MisAjours")
                        .HasForeignKey("NumLotMaj")
                        .HasConstraintName("fk_NumLotMaj")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.TypeMisAjour", "TypeMisAjourNavigation")
                        .WithMany("MisAjours")
                        .HasForeignKey("TypeMaj")
                        .HasConstraintName("fk_TypeMaj")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.AppUser", "UserMajNavigation")
                        .WithMany("MisAjours")
                        .HasForeignKey("UserMaj")
                        .HasConstraintName("fk_userMisAjour");
                });

            modelBuilder.Entity("Domain.Photo", b =>
                {
                    b.HasOne("Domain.AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("Domain.Qp", b =>
                {
                    b.HasOne("Domain.Echeance", "CodeEchanceNavigation")
                        .WithMany("Qp")
                        .HasForeignKey("CodeEchance")
                        .HasConstraintName("fk_echance");

                    b.HasOne("Domain.AppUser", "IduserNavigation")
                        .WithMany("Qps")
                        .HasForeignKey("Iduser")
                        .HasConstraintName("fk_userQp");

                    b.HasOne("Domain.Affilie", "NCinNavigation")
                        .WithMany("Qps")
                        .HasForeignKey("NCin")
                        .HasConstraintName("fk_cin_qp");
                });

            modelBuilder.Entity("Domain.QpMois", b =>
                {
                    b.HasOne("Domain.Affilie", "CinQpNavigation")
                        .WithMany("QpMois")
                        .HasForeignKey("CinQp")
                        .HasConstraintName("fk_affilies_qp_mois")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Echeance", "CodeEchanceQpMoisNavigation")
                        .WithMany("QpMois")
                        .HasForeignKey("CodeEchanceQpMois")
                        .HasConstraintName("fk_code_echance_qp_mois");

                    b.HasOne("Domain.AppUser", "IdUserNavigation")
                        .WithMany("QpMois")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("fk_user_qp_mois");
                });

            modelBuilder.Entity("Domain.RejetMaj", b =>
                {
                    b.HasOne("Domain.MisAjour", "IdMajNavigation")
                        .WithMany("RejetMajs")
                        .HasForeignKey("IdMaj")
                        .HasConstraintName("fk_MajRejete")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.AppUser", "IdUserRejNavigation")
                        .WithMany("RejetMajs")
                        .HasForeignKey("UserRej")
                        .HasConstraintName("fk_userRejMisAjour");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
