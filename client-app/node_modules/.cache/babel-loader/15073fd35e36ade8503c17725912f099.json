{"ast":null,"code":"import _slicedToArray from \"/Users/abdelilah/Desktop/App/client-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/abdelilah/Desktop/App/client-app/src/features/affilies/dashboard/AffilieDashboard.tsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Grid, Input } from 'semantic-ui-react';\nimport AffilieList from './AffilieList';\nimport { observer } from 'mobx-react-lite';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport AffilieListItemPlaceholder from './AffilieListItemPlaceholder';\n\nconst AffilieDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const _rootStore$affilieSto = rootStore.affilieStore,\n        loadAffilies = _rootStore$affilieSto.loadAffilies,\n        loadingInitial = _rootStore$affilieSto.loadingInitial,\n        setPage = _rootStore$affilieSto.setPage,\n        page = _rootStore$affilieSto.page,\n        totalPages = _rootStore$affilieSto.totalPages,\n        setCin = _rootStore$affilieSto.setCin;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        loadingNext = _useState2[0],\n        setLoadingNext = _useState2[1];\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadAffilies().then(() => setLoadingNext(false));\n  };\n\n  const load = event => {\n    if (event.key === \"Enter\") {\n      setLoadingNext(true);\n      setPage(0);\n      loadAffilies().then(() => setLoadingNext(false));\n    }\n  };\n\n  useEffect(() => {\n    loadAffilies();\n  }, [loadAffilies]);\n  return React.createElement(Grid, {\n    columns: \"equal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Input, {\n    placeholder: \"Search...\",\n    onChange: e => setCin(e.target.value),\n    onKeyDown: e => load(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, loadingInitial && page === 0 ? React.createElement(AffilieListItemPlaceholder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }) : React.createElement(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: handleGetNext,\n    hasMore: !loadingNext && page + 1 < totalPages,\n    initialLoad: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(AffilieList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), page > 0 ? React.createElement(AffilieListItemPlaceholder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }) : null), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }));\n};\n\nexport default observer(AffilieDashboard);","map":{"version":3,"sources":["/Users/abdelilah/Desktop/App/client-app/src/features/affilies/dashboard/AffilieDashboard.tsx"],"names":["React","useContext","useEffect","useState","Grid","Input","AffilieList","observer","RootStoreContext","InfiniteScroll","AffilieListItemPlaceholder","AffilieDashboard","rootStore","affilieStore","loadAffilies","loadingInitial","setPage","page","totalPages","setCin","loadingNext","setLoadingNext","handleGetNext","then","load","event","key","e","target","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport {Loader, Card, Dimmer, Grid, Input } from 'semantic-ui-react';\nimport AffilieList from './AffilieList';\nimport { observer } from 'mobx-react-lite';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport AffilieListItemPlaceholder from './AffilieListItemPlaceholder';\n\nconst AffilieDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadAffilies,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages\n    ,setCin\n  } = rootStore.affilieStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadAffilies().then(() => setLoadingNext(false));\n  };\n\n\n\n  const load = (event:any) => {\n \n    if(event.key===\"Enter\")\n    {\n      setLoadingNext(true);\n      setPage(0)\n      loadAffilies().then(() => setLoadingNext(false));\n    }\n\n    \n  };\n\n  useEffect(() => {\n    loadAffilies();\n  }, [loadAffilies]);\n\n  return (\n    \n \n    <Grid  columns='equal'>\n      <Grid.Column>\n      <Input placeholder='Search...' onChange={(e) => setCin(e.target.value)} onKeyDown={(e:any)=> load(e) } />\n      \n      </Grid.Column>\n      <Grid.Column width={8}>\n\n      {loadingInitial && page === 0 ? (\n          <AffilieListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <AffilieList />\n           \n          </InfiniteScroll>\n          \n        )}\n        \n        {  page > 0 ? (\n          <AffilieListItemPlaceholder />\n        ) : null}\n         \n\n      </Grid.Column>\n\n      <Grid.Column>\n        \n           \n      </Grid.Column>\n\n  \n     \n     </Grid>\n\n\n\n\n \n     \n    \n  );\n};\n\nexport default observer(AffilieDashboard);\n"]},"metadata":{},"sourceType":"module"}