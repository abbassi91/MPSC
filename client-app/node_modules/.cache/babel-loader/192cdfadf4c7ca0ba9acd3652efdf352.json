{"ast":null,"code":"import axios from 'axios';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\naxios.interceptors.request.use(config => {\n  const token = window.localStorage.getItem('jwt');\n  if (token) config.headers.Authorization = \"Bearer \".concat(token);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(undefined, error => {\n  if (error.message === 'Network Error' && !error.response) {\n    toast.error('Network error - make sure API is running!');\n  }\n\n  const _error$response = error.response,\n        status = _error$response.status,\n        data = _error$response.data,\n        config = _error$response.config,\n        headers = _error$response.headers;\n\n  if (status === 404) {\n    history.push('/notfound');\n  }\n\n  if (status === 401 && headers['www-authenticate'] === 'Bearer error=\"invalid_token\", error_description=\"The token is expired\"') {\n    window.localStorage.removeItem('jwt');\n    history.push('/');\n    toast.info('Your session has expired, please login again');\n  }\n\n  if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\n    history.push('/notfound');\n  }\n\n  if (status === 500) {\n    toast.error('Server error - check the terminal for more info!');\n  }\n\n  throw error.response;\n});\n\nconst responseBody = response => response.data;\n\nconst requests = {\n  get: url => axios.get(url).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(responseBody),\n  del: url => axios.delete(url).then(responseBody),\n  postForm: (url, file) => {\n    let formData = new FormData();\n    formData.append('File', file);\n    return axios.post(url, formData, {\n      headers: {\n        'Content-type': 'multipart/form-data'\n      }\n    }).then(responseBody);\n  }\n};\n/* const Activities = {\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\n    axios.get('/activities', {params: params}).then(responseBody),\n  details: (id: string) => requests.get(`/activities/${id}`),\n  create: (activity: IActivity) => requests.post('/activities', activity),\n  update: (activity: IActivity) =>\n    requests.put(`/activities/${activity.id}`, activity),\n  delete: (id: string) => requests.del(`/activities/${id}`),\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n  unattend: (id: string) => requests.del(`/activities/${id}/attend`)\n}; */\n\nconst Affilies = {\n  list: params => axios.get('/affilies', {\n    params: params\n  }).then(responseBody),\n  details: cin => requests.get(\"/affilies/\".concat(cin))\n};\nconst User = {\n  current: () => requests.get('/user'),\n  login: user => requests.post(\"/user/login\", user),\n  register: user => requests.post(\"/user/register\", user)\n};\nconst Profiles = {\n  get: username => requests.get(\"/profiles/\".concat(username)),\n  uploadPhoto: photo => requests.postForm(\"/photos\", photo),\n  setMainPhoto: id => requests.post(\"/photos/\".concat(id, \"/setMain\"), {}),\n  deletePhoto: id => requests.del(\"/photos/\".concat(id)),\n  updateProfile: profile => requests.put(\"/profiles\", profile),\n  follow: username => requests.post(\"/profiles/\".concat(username, \"/follow\"), {}),\n  unfollow: username => requests.del(\"/profiles/\".concat(username, \"/follow\")),\n  listFollowings: (username, predicate) => requests.get(\"/profiles/\".concat(username, \"/follow?predicate=\").concat(predicate)),\n  listActivities: (username, predicate) => requests.get(\"/profiles/\".concat(username, \"/activities?predicate=\").concat(predicate))\n};\nexport default {\n  Affilies,\n  User,\n  Profiles\n};","map":{"version":3,"sources":["/Users/abdelilah/Desktop/App/client-app/src/app/api/agent.ts"],"names":["axios","history","toast","defaults","baseURL","process","env","REACT_APP_API_URL","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","status","data","push","removeItem","info","method","errors","hasOwnProperty","responseBody","requests","get","url","then","post","body","put","del","delete","postForm","file","formData","FormData","append","Affilies","list","params","details","cin","User","current","login","user","register","Profiles","username","uploadPhoto","photo","setMainPhoto","id","deletePhoto","updateProfile","profile","follow","unfollow","listFollowings","predicate","listActivities"],"mappings":"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","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { IProfile, IPhoto } from '../models/profile';\nimport { IAffiliesEnvelope } from '../models/affilie';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(\n  config => {\n    const token = window.localStorage.getItem('jwt');\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  error => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(undefined, error => {\n  if (error.message === 'Network Error' && !error.response) {\n    toast.error('Network error - make sure API is running!');\n  }\n  const { status, data, config, headers } = error.response;\n  if (status === 404) {\n    history.push('/notfound');\n  }\n  if (status === 401 && headers['www-authenticate'] === 'Bearer error=\"invalid_token\", error_description=\"The token is expired\"') {\n    window.localStorage.removeItem('jwt');\n    history.push('/')\n    toast.info('Your session has expired, please login again')\n  }\n  if (\n    status === 400 &&\n    config.method === 'get' &&\n    data.errors.hasOwnProperty('id')\n  ) {\n    history.push('/notfound');\n  }\n  if (status === 500) {\n    toast.error('Server error - check the terminal for more info!');\n  }\n  throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nconst requests = {\n  get: (url: string) =>\n    axios\n      .get(url)\n      .then(responseBody),\n  post: (url: string, body: {}) =>\n    axios\n      .post(url, body)\n      .then(responseBody),\n  put: (url: string, body: {}) =>\n    axios\n      .put(url, body)\n      .then(responseBody),\n  del: (url: string) =>\n    axios\n      .delete(url)\n      .then(responseBody),\n  postForm: (url: string, file: Blob) => {\n    let formData = new FormData();\n    formData.append('File', file);\n    return axios\n      .post(url, formData, {\n        headers: { 'Content-type': 'multipart/form-data' }\n      })\n      .then(responseBody);\n  }\n};\n\n/* const Activities = {\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\n    axios.get('/activities', {params: params}).then(responseBody),\n  details: (id: string) => requests.get(`/activities/${id}`),\n  create: (activity: IActivity) => requests.post('/activities', activity),\n  update: (activity: IActivity) =>\n    requests.put(`/activities/${activity.id}`, activity),\n  delete: (id: string) => requests.del(`/activities/${id}`),\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n  unattend: (id: string) => requests.del(`/activities/${id}/attend`)\n}; */\n\n\nconst Affilies = {\n  list: (params: URLSearchParams): Promise<IAffiliesEnvelope> =>\n    axios.get('/affilies', {params: params}).then(responseBody),\n    details: (cin: string) => requests.get(`/affilies/${cin}`)\n};\n\n\nconst User = {\n  current: (): Promise<IUser> => requests.get('/user'),\n  login: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`/user/login`, user),\n  register: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`/user/register`, user)\n};\n\nconst Profiles = {\n  get: (username: string): Promise<IProfile> =>\n    requests.get(`/profiles/${username}`),\n  uploadPhoto: (photo: Blob): Promise<IPhoto> =>\n    requests.postForm(`/photos`, photo),\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n  updateProfile: (profile: Partial<IProfile>) =>\n    requests.put(`/profiles`, profile),\n  follow: (username: string) =>\n    requests.post(`/profiles/${username}/follow`, {}),\n  unfollow: (username: string) => requests.del(`/profiles/${username}/follow`),\n  listFollowings: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n  listActivities: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/activities?predicate=${predicate}`)\n};\n\nexport default {\n  Affilies,\n  User,\n  Profiles\n};\n"]},"metadata":{},"sourceType":"module"}