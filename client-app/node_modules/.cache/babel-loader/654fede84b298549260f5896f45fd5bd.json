{"ast":null,"code":"var _jsxFileName = \"/Users/abdelilah/Desktop/App/client-app/src/features/profiles/ProfileActivities.tsx\";\nimport React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nconst panes = [{\n  menuItem: 'Future Events',\n  pane: {\n    key: 'futureEvents'\n  }\n}, {\n  menuItem: 'Past Events',\n  pane: {\n    key: 'pastEvents'\n  }\n}, {\n  menuItem: 'Hosting',\n  pane: {\n    key: 'hosted'\n  }\n}];\n\nconst ProfileEvents = () => {\n  const rootStore = useContext(RootStoreContext);\n  const _ref = rootStore.profileStore,\n        loadUserActivities = _ref.loadUserActivities,\n        profile = _ref.profile,\n        loadingActivities = _ref.loadingActivities,\n        userActivities = _ref.userActivities;\n  useEffect(() => {\n    loadUserActivities(profile.username);\n  }, [loadUserActivities, profile]);\n\n  const handleTabChange = (e, data) => {\n    let predicate;\n\n    switch (data.activeIndex) {\n      case 1:\n        predicate = 'past';\n        break;\n\n      case 2:\n        predicate = 'hosting';\n        break;\n\n      default:\n        predicate = 'future';\n        break;\n    }\n\n    loadUserActivities(profile.username, predicate);\n  };\n\n  return React.createElement(Tab.Pane, {\n    loading: loadingActivities,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Header, {\n    floated: \"left\",\n    icon: \"calendar\",\n    content: 'Activities',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Tab, {\n    panes: panes,\n    menu: {\n      secondary: true,\n      pointing: true\n    },\n    onTabChange: (e, data) => handleTabChange(e, data),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(Card.Group, {\n    itemsPerRow: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, userActivities.map(activity => React.createElement(Card, {\n    as: Link,\n    to: \"/activities/\".concat(activity.id),\n    key: activity.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Image, {\n    src: \"/assets/categoryImages/\".concat(activity.category, \".jpg\"),\n    style: {\n      minHeight: 100,\n      objectFit: 'cover'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Card.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Card.Header, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, activity.title), React.createElement(Card.Meta, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, format(new Date(activity.date), 'do LLL')), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, format(new Date(activity.date), 'h:mm a'))))))))));\n};\n\nexport default observer(ProfileEvents);","map":{"version":3,"sources":["/Users/abdelilah/Desktop/App/client-app/src/features/profiles/ProfileActivities.tsx"],"names":["React","useEffect","useContext","observer","Tab","Grid","Header","Card","Image","Link","format","RootStoreContext","panes","menuItem","pane","key","ProfileEvents","rootStore","profileStore","loadUserActivities","profile","loadingActivities","userActivities","username","handleTabChange","e","data","predicate","activeIndex","secondary","pointing","map","activity","id","category","minHeight","objectFit","title","Date","date"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,KAAlC,QAAyD,mBAAzD;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AAEA,MAAMC,KAAK,GAAG,CACZ;AAAEC,EAAAA,QAAQ,EAAE,eAAZ;AAA6BC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,GAAG,EAAE;AAAP;AAAnC,CADY,EAEZ;AAAEF,EAAAA,QAAQ,EAAE,aAAZ;AAA2BC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,GAAG,EAAE;AAAP;AAAjC,CAFY,EAGZ;AAAEF,EAAAA,QAAQ,EAAE,SAAZ;AAAuBC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,GAAG,EAAE;AAAP;AAA7B,CAHY,CAAd;;AAMA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,SAAS,GAAGf,UAAU,CAACS,gBAAD,CAA5B;AAD0B,eAOtBM,SAAS,CAACC,YAPY;AAAA,QAGxBC,kBAHwB,QAGxBA,kBAHwB;AAAA,QAIxBC,OAJwB,QAIxBA,OAJwB;AAAA,QAKxBC,iBALwB,QAKxBA,iBALwB;AAAA,QAMxBC,cANwB,QAMxBA,cANwB;AAS1BrB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,kBAAkB,CAACC,OAAO,CAAEG,QAAV,CAAlB;AACD,GAFQ,EAEN,CAACJ,kBAAD,EAAqBC,OAArB,CAFM,CAAT;;AAIA,QAAMI,eAAe,GAAG,CACtBC,CADsB,EAEtBC,IAFsB,KAGnB;AACH,QAAIC,SAAJ;;AACA,YAAQD,IAAI,CAACE,WAAb;AACE,WAAK,CAAL;AACED,QAAAA,SAAS,GAAG,MAAZ;AACA;;AACF,WAAK,CAAL;AACEA,QAAAA,SAAS,GAAG,SAAZ;AACA;;AACF;AACEA,QAAAA,SAAS,GAAG,QAAZ;AACA;AATJ;;AAWAR,IAAAA,kBAAkB,CAACC,OAAO,CAAEG,QAAV,EAAoBI,SAApB,CAAlB;AACD,GAjBD;;AAmBA,SACE,oBAAC,GAAD,CAAK,IAAL;AAAU,IAAA,OAAO,EAAEN,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,MAAhB;AAAuB,IAAA,IAAI,EAAC,UAA5B;AAAuC,IAAA,OAAO,EAAE,YAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AACE,IAAA,KAAK,EAAET,KADT;AAEE,IAAA,IAAI,EAAE;AAAEiB,MAAAA,SAAS,EAAE,IAAb;AAAmBC,MAAAA,QAAQ,EAAE;AAA7B,KAFR;AAGE,IAAA,WAAW,EAAE,CAACL,CAAD,EAAIC,IAAJ,KAAaF,eAAe,CAACC,CAAD,EAAIC,IAAJ,CAH3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,WAAW,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,cAAc,CAACS,GAAf,CAAoBC,QAAD,IAClB,oBAAC,IAAD;AACE,IAAA,EAAE,EAAEvB,IADN;AAEE,IAAA,EAAE,wBAAiBuB,QAAQ,CAACC,EAA1B,CAFJ;AAGE,IAAA,GAAG,EAAED,QAAQ,CAACC,EAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,KAAD;AACE,IAAA,GAAG,mCAA4BD,QAAQ,CAACE,QAArC,SADL;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE,GAAb;AAAkBC,MAAAA,SAAS,EAAE;AAA7B,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EASE,oBAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,SAAS,EAAC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCJ,QAAQ,CAACK,KAA1C,CADF,EAEE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,SAAS,EAAC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM3B,MAAM,CAAC,IAAI4B,IAAJ,CAASN,QAAQ,CAACO,IAAlB,CAAD,EAA0B,QAA1B,CAAZ,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM7B,MAAM,CAAC,IAAI4B,IAAJ,CAASN,QAAQ,CAACO,IAAlB,CAAD,EAA0B,QAA1B,CAAZ,CAFF,CAFF,CATF,CADD,CADH,CAPF,CAJF,CADF,CADF;AAsCD,CAtED;;AAwEA,eAAepC,QAAQ,CAACa,aAAD,CAAvB","sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IUserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst panes = [\n  { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\n  { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\n  { menuItem: 'Hosting', pane: { key: 'hosted' } }\n];\n\nconst ProfileEvents = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadUserActivities,\n    profile,\n    loadingActivities,\n    userActivities\n  } = rootStore.profileStore!;\n\n  useEffect(() => {\n    loadUserActivities(profile!.username);\n  }, [loadUserActivities, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n    switch (data.activeIndex) {\n      case 1:\n        predicate = 'past';\n        break;\n      case 2:\n        predicate = 'hosting';\n        break;\n      default:\n        predicate = 'future';\n        break;\n    }\n    loadUserActivities(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingActivities}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='calendar' content={'Activities'} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4}>\n            {userActivities.map((activity: IUserActivity) => (\n              <Card\n                as={Link}\n                to={`/activities/${activity.id}`}\n                key={activity.id}\n              >\n                <Image\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileEvents);"]},"metadata":{},"sourceType":"module"}