{"ast":null,"code":"/*mport React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { IAffilie } from '../../../app/models/affilie';\nimport PDF, { Text, AddPage, Line, Table, Html } from 'jspdf-react'\n\n//import { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\n//import ReactPDF from '@react-pdf/renderer';\n\n\n \n\n \nconst invisibleStyle = {\n  display: 'none',\n};\n\n  const PdfQp:  React.FC=()=> {\n  \n    const properties = { header: 'Acme' }\n    const head = [[\"ID\", \"Name\", \"Country\"]]\n    const body = [\n        [1, \"Shaw\", \"Tanzania\"],\n        [2, \"Nelson\", \"Kazakhstan\"],\n        [3, \"Garcia\", \"Madagascar\"],\n    ]\n\n  return (\n\n   \n    <React.Fragment>\n        <PDF\n          properties={properties}\n          preview={true}\n        >\n          <Text x={35} y={25} size={40}> xxxx </Text>\n         \n          <AddPage />\n          <Table\n            head={head}\n            body={body}\n          />\n          <AddPage format='a6' orientation='l' />\n          <Text x={10} y={10} color='red'>Sample</Text>\n          <Line x1={20} y1={20} x2={60} y2={20}/>\n          <AddPage />\n          <Html sourceById='page' />\n        </PDF>\n        <div id=\"page\" style={invisibleStyle}>\n          <h1 >Source Html</h1>\n            <p>\n              <strong>lorem ipsumLorem </strong>Ipsum is simply dummy text of the printing and\n              typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever\n              since the 1500s, when an unknown printer took a galley of type and scrambled it to\n              make a type specimen book. It has survived not only five centuries, but also the\n              leap into electronic typesetting, remaining essentially unchanged. It was popularised\n              in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages,\n              and more recently with desktop publishing software like Aldus PageMaker including\n              versions of Lorem Ipsum.\n            </p>\n        </div>\n      </React.Fragment>\n \n\n\n  );\n\n\n};\n\n\nexport default observer(PdfQp);\n*/\nimport { pdf } from '@react-pdf/renderer';\n\nconst saveBlob = (blob, filename) => {\n  var a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.style.display = \"none\";\n  let url = window.URL.createObjectURL(blob);\n  a.href = url;\n  a.download = filename;\n  a.click();\n  window.URL.revokeObjectURL(url);\n  window.open(url);\n};\n\nexport const savePdf = async (document, filename) => {\n  saveBlob(await pdf(document).toBlob(), filename);\n};","map":{"version":3,"sources":["/Users/abdelilah/Desktop/App/client-app/src/features/affilies/PDF/EtatQp.tsx"],"names":["pdf","saveBlob","blob","filename","a","document","createElement","body","appendChild","style","display","url","window","URL","createObjectURL","href","download","click","revokeObjectURL","open","savePdf","toBlob"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA,SAASA,GAAT,QAAoB,qBAApB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAWC,QAAX,KAA+B;AAC9C,MAAIC,CAAC,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAR;AACAD,EAAAA,QAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BJ,CAA1B;AACAA,EAAAA,CAAC,CAACK,KAAF,CAAQC,OAAR,GAAkB,MAAlB;AACA,MAAIC,GAAG,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BZ,IAA3B,CAAV;AACAE,EAAAA,CAAC,CAACW,IAAF,GAASJ,GAAT;AACAP,EAAAA,CAAC,CAACY,QAAF,GAAab,QAAb;AACAC,EAAAA,CAAC,CAACa,KAAF;AACAL,EAAAA,MAAM,CAACC,GAAP,CAAWK,eAAX,CAA2BP,GAA3B;AACAC,EAAAA,MAAM,CAACO,IAAP,CAAYR,GAAZ;AACD,CAVD;;AAYA,OAAO,MAAMS,OAAO,GAAG,OAAOf,QAAP,EAAqBF,QAArB,KAAsC;AAC3DF,EAAAA,QAAQ,CAAC,MAAMD,GAAG,CAACK,QAAD,CAAH,CAAcgB,MAAd,EAAP,EAA+BlB,QAA/B,CAAR;AACD,CAFM","sourcesContent":["/*mport React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { IAffilie } from '../../../app/models/affilie';\nimport PDF, { Text, AddPage, Line, Table, Html } from 'jspdf-react'\n\n//import { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\n//import ReactPDF from '@react-pdf/renderer';\n\n\n \n\n \nconst invisibleStyle = {\n  display: 'none',\n};\n\n  const PdfQp:  React.FC=()=> {\n  \n    const properties = { header: 'Acme' }\n    const head = [[\"ID\", \"Name\", \"Country\"]]\n    const body = [\n        [1, \"Shaw\", \"Tanzania\"],\n        [2, \"Nelson\", \"Kazakhstan\"],\n        [3, \"Garcia\", \"Madagascar\"],\n    ]\n\n  return (\n\n   \n    <React.Fragment>\n        <PDF\n          properties={properties}\n          preview={true}\n        >\n          <Text x={35} y={25} size={40}> xxxx </Text>\n         \n          <AddPage />\n          <Table\n            head={head}\n            body={body}\n          />\n          <AddPage format='a6' orientation='l' />\n          <Text x={10} y={10} color='red'>Sample</Text>\n          <Line x1={20} y1={20} x2={60} y2={20}/>\n          <AddPage />\n          <Html sourceById='page' />\n        </PDF>\n        <div id=\"page\" style={invisibleStyle}>\n          <h1 >Source Html</h1>\n            <p>\n              <strong>lorem ipsumLorem </strong>Ipsum is simply dummy text of the printing and\n              typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever\n              since the 1500s, when an unknown printer took a galley of type and scrambled it to\n              make a type specimen book. It has survived not only five centuries, but also the\n              leap into electronic typesetting, remaining essentially unchanged. It was popularised\n              in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages,\n              and more recently with desktop publishing software like Aldus PageMaker including\n              versions of Lorem Ipsum.\n            </p>\n        </div>\n      </React.Fragment>\n \n\n\n  );\n\n\n};\n\n\nexport default observer(PdfQp);\n*/\n\n\nimport { pdf } from '@react-pdf/renderer';\n\nconst saveBlob = (blob:any, filename:string) => {\n  var a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.style.display = \"none\";\n  let url = window.URL.createObjectURL(blob);\n  a.href = url;\n  a.download = filename;\n  a.click();\n  window.URL.revokeObjectURL(url);\n  window.open(url);\n};\n\nexport const savePdf = async (document:any, filename:any) => {\n  saveBlob(await pdf(document).toBlob(), filename);\n};\n\n"]},"metadata":{},"sourceType":"module"}