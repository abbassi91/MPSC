{"ast":null,"code":"import _initializerDefineProperty from \"/Users/abdelilah/Desktop/App/client-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/abdelilah/Desktop/App/client-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/abdelilah/Desktop/App/client-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _temp;\n\nimport { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\nimport agent from '../api/agent';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { setActivityProps, createAttendee } from '../common/util/util';\nimport { HubConnectionBuilder, LogLevel } from '@aspnet/signalr';\nconst LIMIT = 2;\nlet ActivityStore = (_dec = observable.ref, (_class = (_temp = class ActivityStore {\n  constructor(rootStore) {\n    this.rootStore = void 0;\n\n    _initializerDefineProperty(this, \"activityRegistry\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"activity\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"loadingInitial\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"submitting\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"target\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"loading\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"hubConnection\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"activityCount\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"page\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"predicate\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"setPredicate\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"setPage\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"createHubConnection\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"stopHubConnection\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"addComment\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"loadActivities\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"loadActivity\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"clearActivity\", _descriptor18, this);\n\n    this.getActivity = id => {\n      return this.activityRegistry.get(id);\n    };\n\n    _initializerDefineProperty(this, \"createActivity\", _descriptor19, this);\n\n    _initializerDefineProperty(this, \"editActivity\", _descriptor20, this);\n\n    _initializerDefineProperty(this, \"deleteActivity\", _descriptor21, this);\n\n    _initializerDefineProperty(this, \"attendActivity\", _descriptor22, this);\n\n    _initializerDefineProperty(this, \"cancelAttendance\", _descriptor23, this);\n\n    this.rootStore = rootStore;\n    reaction(() => this.predicate.keys(), () => {\n      this.page = 0;\n      this.activityRegistry.clear();\n      this.loadActivities();\n    });\n  }\n\n  get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n      if (key === 'startDate') {\n        params.append(key, value.toISOString());\n      } else {\n        params.append(key, value);\n      }\n    });\n    return params;\n  }\n\n  get totalPages() {\n    return Math.ceil(this.activityCount / LIMIT);\n  }\n\n  get activitiesByDate() {\n    return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()));\n  }\n\n  groupActivitiesByDate(activities) {\n    const sortedActivities = activities.sort((a, b) => a.date.getTime() - b.date.getTime());\n    return Object.entries(sortedActivities.reduce((activities, activity) => {\n      const date = activity.date.toISOString().split('T')[0];\n      activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n      return activities;\n    }, {}));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"activityRegistry\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Map();\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"activity\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"loadingInitial\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"submitting\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"loading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"hubConnection\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"activityCount\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"page\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"predicate\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Map();\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"setPredicate\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return (predicate, value) => {\n      this.predicate.clear();\n\n      if (predicate !== 'all') {\n        this.predicate.set(predicate, value);\n      }\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"axiosParams\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"axiosParams\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"totalPages\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"totalPages\"), _class.prototype), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"setPage\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return page => {\n      this.page = page;\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"createHubConnection\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.hubConnection = new HubConnectionBuilder().withUrl(process.env.REACT_APP_API_CHAT_URL, {\n        accessTokenFactory: () => this.rootStore.commonStore.token\n      }).configureLogging(LogLevel.Information).build();\n      this.hubConnection.start().then(() => console.log(this.hubConnection.state)).catch(error => console.log('Error establishing connection: ', error));\n      this.hubConnection.on('ReceiveComment', comment => {\n        runInAction(() => {\n          this.activity.comments.push(comment);\n        });\n      });\n    };\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"stopHubConnection\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.hubConnection.stop();\n    };\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"addComment\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async values => {\n      values.activityId = this.activity.id;\n\n      try {\n        await this.hubConnection.invoke('SendComment', values);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"activitiesByDate\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"activitiesByDate\"), _class.prototype), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"loadActivities\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.loadingInitial = true;\n\n      try {\n        const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\n        const {\n          activities,\n          activityCount\n        } = activitiesEnvelope;\n        runInAction('loading activities', () => {\n          activities.forEach(activity => {\n            setActivityProps(activity, this.rootStore.userStore.user);\n            this.activityRegistry.set(activity.id, activity);\n          });\n          this.activityCount = activityCount;\n          this.loadingInitial = false;\n        });\n      } catch (error) {\n        runInAction('load activities error', () => {\n          this.loadingInitial = false;\n        });\n      }\n    };\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"loadActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async id => {\n      let activity = this.getActivity(id);\n\n      if (activity) {\n        this.activity = activity;\n        return toJS(activity);\n      } else {\n        this.loadingInitial = true;\n\n        try {\n          activity = await agent.Activities.details(id);\n          runInAction('getting activity', () => {\n            setActivityProps(activity, this.rootStore.userStore.user);\n            this.activity = activity;\n            this.activityRegistry.set(activity.id, activity);\n            this.loadingInitial = false;\n          });\n          return activity;\n        } catch (error) {\n          runInAction('get activity error', () => {\n            this.loadingInitial = false;\n          });\n          console.log(error);\n        }\n      }\n    };\n  }\n}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"clearActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.activity = null;\n    };\n  }\n}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, \"createActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.create(activity);\n        const attendee = createAttendee(this.rootStore.userStore.user);\n        attendee.isHost = true;\n        let attendees = [];\n        attendees.push(attendee);\n        activity.attendees = attendees;\n        activity.comments = [];\n        activity.isHost = true;\n        runInAction('create activity', () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.submitting = false;\n        });\n        history.push(`/activities/${activity.id}`);\n      } catch (error) {\n        runInAction('create activity error', () => {\n          this.submitting = false;\n        });\n        toast.error('Problem submitting data');\n        console.log(error.response);\n      }\n    };\n  }\n}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, \"editActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.update(activity);\n        runInAction('editing activity', () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.activity = activity;\n          this.submitting = false;\n        });\n        history.push(`/activities/${activity.id}`);\n      } catch (error) {\n        runInAction('edit activity error', () => {\n          this.submitting = false;\n        });\n        toast.error('Problem submitting data');\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, \"deleteActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async (event, id) => {\n      this.submitting = true;\n      this.target = event.currentTarget.name;\n\n      try {\n        await agent.Activities.delete(id);\n        runInAction('deleting activity', () => {\n          this.activityRegistry.delete(id);\n          this.submitting = false;\n          this.target = '';\n        });\n      } catch (error) {\n        runInAction('delete activity error', () => {\n          this.submitting = false;\n          this.target = '';\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, \"attendActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const attendee = createAttendee(this.rootStore.userStore.user);\n      this.loading = true;\n\n      try {\n        await agent.Activities.attend(this.activity.id);\n        runInAction(() => {\n          if (this.activity) {\n            this.activity.attendees.push(attendee);\n            this.activity.isGoing = true;\n            this.activityRegistry.set(this.activity.id, this.activity);\n            this.loading = false;\n          }\n        });\n      } catch (error) {\n        runInAction(() => {\n          this.loading = false;\n        });\n        toast.error('Problem signing up to activity');\n      }\n    };\n  }\n}), _descriptor23 = _applyDecoratedDescriptor(_class.prototype, \"cancelAttendance\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.loading = true;\n\n      try {\n        await agent.Activities.unattend(this.activity.id);\n        runInAction(() => {\n          if (this.activity) {\n            this.activity.attendees = this.activity.attendees.filter(a => a.username !== this.rootStore.userStore.user.username);\n            this.activity.isGoing = false;\n            this.activityRegistry.set(this.activity.id, this.activity);\n            this.loading = false;\n          }\n        });\n      } catch (error) {\n        runInAction(() => {\n          this.loading = false;\n        });\n        toast.error('Problem cancelling attendance');\n      }\n    };\n  }\n})), _class));\nexport { ActivityStore as default };","map":{"version":3,"sources":["/Users/abdelilah/Desktop/App/client-app/src/app/stores/activityStore.ts"],"names":["observable","action","computed","runInAction","reaction","toJS","agent","history","toast","setActivityProps","createAttendee","HubConnectionBuilder","LogLevel","LIMIT","ActivityStore","ref","constructor","rootStore","getActivity","id","activityRegistry","get","predicate","keys","page","clear","loadActivities","axiosParams","params","URLSearchParams","append","String","forEach","value","key","toISOString","totalPages","Math","ceil","activityCount","activitiesByDate","groupActivitiesByDate","Array","from","values","activities","sortedActivities","sort","a","b","date","getTime","Object","entries","reduce","activity","split","Map","set","hubConnection","withUrl","process","env","REACT_APP_API_CHAT_URL","accessTokenFactory","commonStore","token","configureLogging","Information","build","start","then","console","log","state","catch","error","on","comment","comments","push","stop","activityId","invoke","loadingInitial","activitiesEnvelope","Activities","list","userStore","user","details","submitting","create","attendee","isHost","attendees","response","update","event","target","currentTarget","name","delete","loading","attend","isGoing","unattend","filter","username"],"mappings":"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","sourcesContent":["import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\nimport { SyntheticEvent } from 'react';\nimport { IActivity } from '../models/activity';\nimport agent from '../api/agent';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { setActivityProps, createAttendee } from '../common/util/util';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@aspnet/signalr';\n\nconst LIMIT = 2;\n\nexport default class ActivityStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.activityRegistry.clear();\n        this.loadActivities();\n      }\n    )\n  }\n\n  @observable activityRegistry = new Map();\n  @observable activity: IActivity | null = null;\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = '';\n  @observable loading = false;\n  @observable.ref hubConnection: HubConnection | null = null;\n  @observable activityCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n\n  @action setPredicate = (predicate: string, value: string | Date) => {\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @computed get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n      if (key === 'startDate') {\n        params.append(key, value.toISOString())\n      } else {\n        params.append(key, value)\n      }\n    })\n    return params;\n  }\n\n  @computed get totalPages() {\n    return Math.ceil(this.activityCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  }\n\n  @action createHubConnection = () => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .catch(error => console.log('Error establishing connection: ', error));\n\n    this.hubConnection.on('ReceiveComment', comment => {\n      runInAction(() => {\n        this.activity!.comments.push(comment)\n      })\n    })\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection!.stop()\n  }\n\n  @action addComment = async (values: any) => {\n    values.activityId = this.activity!.id;\n    try {\n      await this.hubConnection!.invoke('SendComment', values)\n    } catch (error) {\n      console.log(error);\n    }\n  } \n\n  @computed get activitiesByDate() {\n    return this.groupActivitiesByDate(\n      Array.from(this.activityRegistry.values())\n    );\n  }\n\n  groupActivitiesByDate(activities: IActivity[]) {\n    const sortedActivities = activities.sort(\n      (a, b) => a.date.getTime() - b.date.getTime()\n    );\n    return Object.entries(\n      sortedActivities.reduce(\n        (activities, activity) => {\n          const date = activity.date.toISOString().split('T')[0];\n          activities[date] = activities[date]\n            ? [...activities[date], activity]\n            : [activity];\n          return activities;\n        },\n        {} as { [key: string]: IActivity[] }\n      )\n    );\n  }\n\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n    try {\n      const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\n      const {activities, activityCount} = activitiesEnvelope;\n      runInAction('loading activities', () => {\n        activities.forEach(activity => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activityRegistry.set(activity.id, activity);\n        });\n        this.activityCount = activityCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction('load activities error', () => {\n        this.loadingInitial = false;\n      });\n    }\n  };\n\n  @action loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n    if (activity) {\n      this.activity = activity;\n      return toJS(activity);\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(id);\n        runInAction('getting activity', () => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activity = activity;\n          this.activityRegistry.set(activity.id, activity);\n          this.loadingInitial = false;\n        });\n        return activity;\n      } catch (error) {\n        runInAction('get activity error', () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  @action clearActivity = () => {\n    this.activity = null;\n  };\n\n  getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  @action createActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity);\n      const attendee = createAttendee(this.rootStore.userStore.user!);\n      attendee.isHost = true;\n      let attendees = [];\n      attendees.push(attendee);\n      activity.attendees = attendees;\n      activity.comments = [];\n      activity.isHost = true;\n      runInAction('create activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error.response);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction('editing activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.activity = activity;\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction('edit activity error', () => {\n        this.submitting = false;\n      });\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n  @action deleteActivity = async (\n    event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Activities.delete(id);\n      runInAction('deleting activity', () => {\n        this.activityRegistry.delete(id);\n        this.submitting = false;\n        this.target = '';\n      });\n    } catch (error) {\n      runInAction('delete activity error', () => {\n        this.submitting = false;\n        this.target = '';\n      });\n      console.log(error);\n    }\n  };\n\n  @action attendActivity = async () => {\n    const attendee = createAttendee(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees.push(attendee);\n          this.activity.isGoing = true;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem signing up to activity');\n    }\n  };\n\n  @action cancelAttendance = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.unattend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees = this.activity.attendees.filter(\n            a => a.username !== this.rootStore.userStore.user!.username\n          );\n          this.activity.isGoing = false;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error('Problem cancelling attendance');\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}