{"ast":null,"code":"var _jsxFileName = \"/Users/abdelilah/Desktop/App/client-app/src/features/profiles/ProfileHeader.tsx\";\nimport React from 'react';\nimport { Segment, Item, Header, Button, Grid, Statistic, Divider, Reveal } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\n\nconst ProfileHeader = ({\n  profile,\n  isCurrentUser,\n  loading,\n  follow,\n  unfollow\n}) => {\n  return React.createElement(Segment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Item.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Item.Image, {\n    avatar: true,\n    size: \"small\",\n    src: profile.image || '/assets/user.png',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(Item.Content, {\n    verticalAlign: \"middle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, profile.displayName))))), React.createElement(Grid.Column, {\n    width: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Statistic.Group, {\n    widths: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Statistic, {\n    label: \"Followers\",\n    value: profile.followersCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    label: \"Following\",\n    value: profile.followingCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), !isCurrentUser && React.createElement(Reveal, {\n    animated: \"move\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Reveal.Content, {\n    visible: true,\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Button, {\n    fluid: true,\n    color: \"teal\",\n    content: profile.following ? 'Following' : 'Not following',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(Reveal.Content, {\n    hidden: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Button, {\n    loading: loading,\n    fluid: true,\n    basic: true,\n    color: profile.following ? 'red' : 'green',\n    content: profile.following ? 'Unfollow' : 'Follow',\n    onClick: profile.following ? () => unfollow(profile.username) : () => follow(profile.username),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }))))));\n};\n\nexport default observer(ProfileHeader);","map":{"version":3,"sources":["/Users/abdelilah/Desktop/App/client-app/src/features/profiles/ProfileHeader.tsx"],"names":["React","Segment","Item","Header","Button","Grid","Statistic","Divider","Reveal","observer","ProfileHeader","profile","isCurrentUser","loading","follow","unfollow","image","displayName","followersCount","followingCount","width","following","username"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Segment,\n  Item,\n  Header,\n  Button,\n  Grid,\n  Statistic,\n  Divider,\n  Reveal\n} from 'semantic-ui-react';\nimport { IProfile } from '../../app/models/profile';\nimport { observer } from 'mobx-react-lite';\n\ninterface IProps {\n  profile: IProfile;\n  isCurrentUser: boolean;\n  loading: boolean;\n  follow: (username: string) => void;\n  unfollow: (username: string) => void;\n}\n\nconst ProfileHeader: React.FC<IProps> = ({\n  profile,\n  isCurrentUser,\n  loading,\n  follow,\n  unfollow\n}) => {\n  return (\n    <Segment>\n      <Grid>\n        <Grid.Column width={12}>\n          <Item.Group>\n            <Item>\n              <Item.Image\n                avatar\n                size='small'\n                src={profile.image || '/assets/user.png'}\n              />\n              <Item.Content verticalAlign='middle'>\n                <Header as='h1'>{profile.displayName}</Header>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <Statistic.Group widths={2}>\n            <Statistic label='Followers' value={profile.followersCount} />\n            <Statistic label='Following' value={profile.followingCount} />\n          </Statistic.Group>\n          <Divider />\n          {!isCurrentUser && (\n            <Reveal animated='move'>\n              <Reveal.Content visible style={{ width: '100%' }}>\n                <Button\n                  fluid\n                  color='teal'\n                  content={profile.following ? 'Following' : 'Not following'}\n                />\n              </Reveal.Content>\n              <Reveal.Content hidden>\n                <Button\n                  loading={loading}\n                  fluid\n                  basic\n                  color={profile.following ? 'red' : 'green'}\n                  content={profile.following ? 'Unfollow' : 'Follow'}\n                  onClick={\n                    profile.following\n                      ? () => unfollow(profile.username)\n                      : () => follow(profile.username)\n                  }\n                />\n              </Reveal.Content>\n            </Reveal>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(ProfileHeader);\n"]},"metadata":{},"sourceType":"module"}